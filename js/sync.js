/**
 * Script de synchronisation des donn√©es entre diff√©rentes pages du dashboard
 * Ce script s'assure que les modifications effectu√©es dans une page sont refl√©t√©es
 * dans les autres pages ouvertes sans n√©cessiter de rafra√Æchissement.
 */

// Cl√© unique pour √©viter les collisions avec d'autres applications
const SYNC_KEY = 'lithium_dashboard_sync';
const DATA_KEY = 'lithiumRefineries';

// Variable pour suivre la derni√®re mise √† jour connue
let lastKnownUpdate = Date.now();
let isSyncActive = false; // √âviter les boucles infinies

// Initialisation: enregistrer l'√©couteur d'√©v√©nements storage
window.addEventListener('storage', function(event) {
    // R√©agir uniquement aux changements de nos cl√©s sp√©cifiques
    if (event.key === SYNC_KEY || event.key === DATA_KEY) {
        console.log('üîÑ Changement de donn√©es d√©tect√©:', event.key);
        syncData();
    }
});

// Fonction pour synchroniser les donn√©es depuis le localStorage
function syncData() {
    // √âviter les boucles de synchronisation
    if (isSyncActive) return;
    isSyncActive = true;
    
    try {
        // Charger les donn√©es √† jour depuis le localStorage
        const syncData = localStorage.getItem(SYNC_KEY);
        const timestamp = syncData ? parseInt(syncData) : 0;
        
        // Si les donn√©es sont plus r√©centes que notre derni√®re mise √† jour connue
        if (timestamp > lastKnownUpdate) {
            console.log('üîÑ Nouvelles donn√©es disponibles, mise √† jour du dashboard...');
            
            // Mettre √† jour notre timestamp
            lastKnownUpdate = timestamp;
            
            // Charger les donn√©es
            const data = localStorage.getItem(DATA_KEY);
            if (data) {
                try {
                    // Mise √† jour des donn√©es globales
                    window.refineries = JSON.parse(data);
                    
                    // Mettre √† jour l'affichage
                    if (typeof window.updateDashboard === 'function') {
                        window.updateDashboard();
                        console.log('‚úÖ Dashboard mis √† jour avec succ√®s!');
                    } else {
                        console.log('‚ö†Ô∏è La fonction updateDashboard n\'est pas disponible');
                        // Tentative de mise √† jour alternative
                        triggerUpdate();
                    }
                } catch (parseError) {
                    console.error('‚ùå Erreur lors du parsing des donn√©es:', parseError);
                }
            }
        }
    } catch (error) {
        console.error('‚ùå Erreur lors de la synchronisation:', error);
    } finally {
        isSyncActive = false;
    }
}

// Fonction pour signaler une mise √† jour des donn√©es
function signalDataChange() {
    try {
        // Enregistrer le timestamp de la mise √† jour
        lastKnownUpdate = Date.now();
        localStorage.setItem(SYNC_KEY, lastKnownUpdate.toString());
        console.log('üì¢ Signal de changement de donn√©es √©mis:', lastKnownUpdate);
    } catch (error) {
        console.error('‚ùå Erreur lors de la signalisation des changements:', error);
    }
}

// Fonction pour tenter de d√©clencher une mise √† jour par diff√©rentes m√©thodes
function triggerUpdate() {
    console.log('üîç Tentative de mise √† jour alternative...');
    
    // M√©thode 1: Essayer d'appeler directement des fonctions connues
    const updateFunctions = [
        'updateTable', 
        'updateCountriesView', 
        'updateStats', 
        'updateMapMarkers', 
        'updateCharts',
        'updateDisplay'
    ];
    
    let updatesApplied = false;
    
    updateFunctions.forEach(funcName => {
        if (typeof window[funcName] === 'function') {
            try {
                // Obtenir les installations filtr√©es si la fonction est disponible
                let filtered = window.refineries;
                if (typeof window.filterRefineries === 'function') {
                    filtered = window.filterRefineries();
                }
                
                window[funcName](filtered);
                console.log(`‚úÖ Fonction ${funcName} ex√©cut√©e`);
                updatesApplied = true;
            } catch (funcError) {
                console.warn(`‚ö†Ô∏è Erreur lors de l'ex√©cution de ${funcName}:`, funcError);
            }
        }
    });
    
    // M√©thode 2: Si rien n'a fonctionn√©, d√©clencher un √©v√©nement personnalis√©
    if (!updatesApplied) {
        console.log('üîî D√©clenchement d\'un √©v√©nement personnalis√© de mise √† jour');
        const updateEvent = new CustomEvent('dashboard_data_updated', { 
            detail: { timestamp: lastKnownUpdate } 
        });
        document.dispatchEvent(updateEvent);
    }
}

// Ne pas perturber le chargement initial des donn√©es
let initialLoadComplete = false;
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Script de synchronisation initialis√© - attente du chargement initial des donn√©es');
    
    // Attendre que le chargement initial soit termin√©
    setTimeout(() => {
        initialLoadComplete = true;
        console.log('üìã Chargement initial suppos√© termin√©, synchronisation activ√©e');
    }, 2000);
});

// V√©rifier les mises √† jour p√©riodiquement (toutes les 2 secondes), mais seulement apr√®s le chargement initial
setInterval(() => {
    if (initialLoadComplete) {
        syncData();
    }
}, 2000);

// Ne pas perturber les fonctions existantes
const originalSaveData = window.saveData;
window.saveData = function() {
    // Appeler la fonction originale si elle existe
    let result;
    if (typeof originalSaveData === 'function') {
        result = originalSaveData.apply(this, arguments);
    } else {
        // Sinon, enregistrer directement les donn√©es
        localStorage.setItem(DATA_KEY, JSON.stringify(window.refineries || []));
    }
    
    // Ne pas signaler les changements pendant le chargement initial
    if (initialLoadComplete) {
        // Signaler le changement pour les autres pages
        signalDataChange();
    }
    
    return result;
};

// √âcouter l'√©v√©nement personnalis√©
document.addEventListener('dashboard_data_updated', function(event) {
    console.log('üîî √âv√©nement de mise √† jour re√ßu:', event.detail);
    syncData();
});

// Exposer les fonctions de synchronisation dans l'espace global
window.syncData = syncData;
window.signalDataChange = signalDataChange;